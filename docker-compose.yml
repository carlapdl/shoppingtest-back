# docker-compose.yml
#version: '3.8' # Use a recent Docker Compose file format version

services:
  # Web server (Apache) and PHP combined in one service
  dbmysql:
    image: mysql:latest
    container_name: shoppingtest-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    command: --bind-address=0.0.0.0
    ports:
      - 3307:3306
    volumes:
      - mysqldata:/var/lib/mysql
    networks:
      - app-network
  web:
    build:
      #context: ./php # Build PHP/Apache service from the 'php' directory
      dockerfile: Dockerfile
    container_name: shoppingtest-web_server # A descriptive name for your web container
    ports:
      - 82:80 
    volumes:
      - ./src:/var/www/html # Mount your PHP application code into the web server's root
      # Optional: If you have a custom Apache configuration file, uncomment and create apache.conf
      # - ./php/apache.conf:/etc/apache2/sites-available/000-default.conf
    depends_on:
      - dbmysql # The web service needs MySQL to be available to connect
    environment:
      # Pass database environment variables to PHP (these will be accessible via getenv() in PHP)
      MYSQL_DB_HOST: dbmysql
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      # You can also set php.ini directives here if needed, e.g.:
      # PHP_INI_DATE_TIMEZONE: "Asia/Manila"
    networks:
      - app-network
  phpmyadmin:
    image: phpmyadmin:latest
    container_name: shoppingtest-phpmyadmin
    links:
      - dbmysql
    restart: always
    ports:
      - 8082:80
    environment:
      PMA_HOST: dbmysql
      PMA_PORT: 3306
    depends_on:
      - dbmysql
    networks:
      - app-network
volumes:
  mysqldata:
networks:
  app-network: # Define a custom network to allow services to communicate by name
    driver: bridge